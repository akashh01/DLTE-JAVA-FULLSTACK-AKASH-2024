Requirements:
Solid knowledge of the modern Rust language. You are expected to comfortably use enums, references, lifetimes, generics, standard and custom traits, be familiar with the standard library, know how to organize a project with modules and crates, etc.
Async programming with Rust. You should be comfortable with writing multi-threaded code and are expected to be familiar with the concepts of tokio, even though working experience with it is not a requirement.
Application-level integration. You should be able to integrate your code with a wide variety of other systems. Experience with various databases and database client libraries is a plus. Experience making API clients is plus. Experience making Web and API servers is a plus.
Unit and property testing. You are expected to write well-tested code (with tests that catch likely defects and are not too hard to maintain).
Familiarity with Logging and tracing. Experience organizing logging, tracing, and monitoring (also, working with logs and metrics aggregation systems) is a bonus.
General requirements:

Knowledge of the fundamental algorithms and data structures like binary search tree, DFS, hashtable, quicksort, etc.
Knowledge of computer networks: HTTP, TCP/IP stack, understanding of poll- and push-based data synchronization models and their usage in modern service APIs.
Familiarity with tools used for build/deploy automation and CI/CD: Docker, Nix, Kubernetes, etc.
Good coding culture (code structuring and decoupling, using git and pull requests, code review practices).
Good level of self-organization.